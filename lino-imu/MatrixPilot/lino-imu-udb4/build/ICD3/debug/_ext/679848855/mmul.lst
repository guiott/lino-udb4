MPLAB ASM30 Listing:  ../../libVectorMatrix/mmul.s 			page 1


   1              	;*********************************************************************
   2              	;                                                                    *
   3              	;                       Software License Agreement                   *
   4              	;                                                                    *
   5              	;   The software supplied herewith by Microchip Technology           *
   6              	;   Incorporated (the "Company") for its dsPIC controller            *
   7              	;   is intended and supplied to you, the Company's customer,         *
   8              	;   for use solely and exclusively on Microchip dsPIC                *
   9              	;   products. The software is owned by the Company and/or its        *
  10              	;   supplier, and is protected under applicable copyright laws. All  *
  11              	;   rights are reserved. Any use in violation of the foregoing       *
  12              	;   restrictions may subject the user to criminal sanctions under    *
  13              	;   applicable laws, as well as to civil liability for the breach of *
  14              	;   the terms and conditions of this license.                        *
  15              	;                                                                    *
  16              	;   THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION.  NO           *
  17              	;   WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING,    *
  18              	;   BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND    *
  19              	;   FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE     *
  20              	;   COMPANY SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL,  *
  21              	;   INCIDENTAL OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.  *
  22              	;                                                                    *
  23              	;   (c) Copyright 2003 Microchip Technology, All rights reserved.    *
  24              	;*********************************************************************
  25              	
  26              		; Local inclusions.
  29              		.list
  30              	
  31              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  32              	
  33              		.section .libdsp, code
  34              	
  35              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  36              	;
  37              	; _MatrixMultiply: Matrix Multiplication.
  38              	;
  39              	; Operation:
  40              	;	dstM[i][j] = sum_k(srcM1[i][k]*srcM2[k][j]), with
  41              	; i in {0, 1, ..., numRows1-1}
  42              	; j in {0, 1, ..., numCols2-1}
  43              	; k in {0, 1, ..., numCols1Rows2-1}
  44              	;
  45              	; Input:
  46              	;	w0 = number rows in source one matrix (numRows1)
  47              	;	w1 = number cols in source one matrix,
  48              	;	     and rows in source tow matrix (numCols1Rows2)
  49              	;	w2 = number cols in source two matrix (numCols2)
  50              	;	w3 = ptr to destination matrix (dstM)
  51              	;	w4 = ptr to source one matrix (srcM1)
  52              	;	w5 = ptr to source two matrix (srcM2)
  53              	; Return:
  54              	;	w0 = ptr to destination matrix (dstM)
  55              	;
  56              	; System resources usage:
  57              	;	{w0..w7}	used, not restored
  58              	;	{w8..w13}	used, and restored
  59              	;	 AccuA		saved, used, restored
MPLAB ASM30 Listing:  ../../libVectorMatrix/mmul.s 			page 2


  60              	;	 CORCON		saved, used, restored
  61              	;	 DO			saved, used, restored
  62              	;
  63              	; DO and REPEAT instruction usage.
  64              	;	2 level DO instruction
  65              	;	no REPEAT intructions
  66              	;
  67              	; Program words (24-bit instructions):
  68              	;	35
  69              	;
  70              	; Cycles (including C-function call and return overheads):
  71              	;	36 + numRows1*(8 + numCols2*(7 + 4*numCols1Rows2))
  72              	;............................................................................
  73              	
  74              		.global	_MatrixMultiply	; export
  75              	_MatrixMultiply:
  76              	
  77              	;	save the 40 bit A accumulator
  78 000000  00 00 F8 		push	ACCAL
  79 000002  00 00 F8 		push	ACCAH
  80 000004  00 00 F8 		push	ACCAU
  81              	
  82              	;............................................................................
  83              	
  84              		; Save working registers.
  85 000006  88 9F BE 		push.d	w8				; {w8:w9} to TOS
  86 000008  8A 9F BE 		push.d	w10				; {w10:w11} to TOS
  87 00000a  8C 9F BE 		push.d	w12				; {w12:w13} to TOS
  88              	
  89              	;............................................................................
  90              	
  91              		; Prepare CORCON for fractional computation.
  92 00000c  44 00 F8 		push	CORCON
  93              		fractsetup	w13
  93 00000e  0D 0F 20 	> mov #FRACT_MODE,w13
  93 000010  2D 02 88 	> mov w13,CORCON
  94              	
  95              	;............................................................................
  96              	
  97 000012  83 06 78 		mov	w3,w13				; save return value (dstM)
  98              	
  99              	;............................................................................
 100              	
 101 000014  01 06 E9 		dec	w1,w12				; w12 = numCols1Rows2-1
 102 000016  82 05 E9 		dec	w2,w11				; w11 = numCols2-1
 103 000018  81 80 40 		add	w1,w1,w1			; w1  = sizeof (Cols1Rows2)
 104 00001a  02 01 41 		add	w2,w2,w2			; w2  = sizeof (Cols2)
 105              	
 106              	_doRows1:
 107 00001c  00 00 E9 		dec	w0,w0				; w0  = w0-1
 108 00001e  00 00 35 		bra	lt,_doneRows1
 109              							; do (numRows1) times
 110 000020  05 05 78 		mov	w5,w10				; w10-> srcM2[0][0]
 111              	
 112              	;	save the do loop registers
 113 000022  00 00 F8 		push	DCOUNT
 114 000024  00 00 F8 		push	DOSTARTL
MPLAB ASM30 Listing:  ../../libVectorMatrix/mmul.s 			page 3


 115 000026  00 00 F8 		push	DOSTARTH
 116 000028  00 00 F8 		push	DOENDL
 117 00002a  00 00 F8 		push	DOENDH
 118              	
 119 00002c  0B 80 08 		do	w11,_endCols2		; {	; do (numCols2-1)+1 times
 119         00 00 00 
 120 000030  04 04 78 		mov	w4,w8				; w8 -> srcM1[i][0]
 121 000032  8A 04 78 		mov	w10,w9				; w9 -> srcM2[0][j]
 122 000034  12 01 C3 		clr	a				; a   = 0
 123              	
 124              	;	save the do loop registers
 125 000036  00 00 F8 		push	DCOUNT
 126 000038  00 00 F8 		push	DOSTARTL
 127 00003a  00 00 F8 		push	DOSTARTH
 128 00003c  00 00 F8 		push	DOENDL
 129 00003e  00 00 F8 		push	DOENDH
 130              	
 131 000040  0C 80 08 		do	w12,_endCols1Rows2	; {	; do (numCols1Rows2-1)+1 times
 131         00 00 00 
 132 000044  38 03 78 		mov	[w8++],w6			; w6  = srcM1[i][k]
 133              							; w8 -> srcM1[i][k+1]
 134 000046  99 03 78 		mov	[w9],w7				; w7  = srcM2[k][j]
 135 000048  12 01 C6 		mac	w6*w7,a				; a  += srcM1[i][k]*srcM2[k][j]
 136              	_endCols1Rows2:
 137 00004a  82 84 44 		add	w9,w2,w9			; w9 -> srcM2[k+1][0]
 138              	
 139              	;	restore the do loop registers
 140 00004c  00 00 F9 		pop		DOENDH
 141 00004e  00 00 F9 		pop		DOENDL
 142 000050  00 00 F9 		pop		DOSTARTH
 143 000052  00 00 F9 		pop		DOSTARTL
 144 000054  00 00 F9 		pop		DCOUNT
 145              	
 146              	; }
 147              	
 148 000056  33 00 CD 		sac.r	a,[w3++]			; dst[i][j] =
 149              							; sum_k(srcM1[i][k]*srcM2[k][j])
 150              		; Update for next column.
 151              	_endCols2:
 152 000058  0A 85 E8 		inc2	w10,w10				; w10-> srcM2[0][j+1]
 153              	
 154              	;	restore the do loop registers
 155 00005a  00 00 F9 		pop		DOENDH
 156 00005c  00 00 F9 		pop		DOENDL
 157 00005e  00 00 F9 		pop		DOSTARTH
 158 000060  00 00 F9 		pop		DOSTARTL
 159 000062  00 00 F9 		pop		DCOUNT
 160              	
 161              	; }
 162              	
 163              		; Update for next row.
 164 000064  01 02 42 		add	w4,w1,w4			; w4 -> srcM1[i][0]
 165 000066  00 00 37 		bra	_doRows1
 166              	_doneRows1:
 167              	
 168              	;............................................................................
 169              	
MPLAB ASM30 Listing:  ../../libVectorMatrix/mmul.s 			page 4


 170 000068  0D 00 78 		mov	w13,w0				; restore return value
 171              	
 172              	;............................................................................
 173              	
 174              		; restore CORCON.
 175 00006a  44 00 F9 		pop	CORCON
 176              	
 177              	;............................................................................
 178              	
 179              		; Restore working registers.
 180 00006c  4F 06 BE 		pop.d	w12				; {w12:w13} from TOS
 181 00006e  4F 05 BE 		pop.d	w10				; {w10:w11} from TOS
 182 000070  4F 04 BE 		pop.d	w8				; {w8:w9} from TOS
 183              	
 184              	;............................................................................
 185              	
 186              	;	restore the 40 bit A accumulator
 187 000072  00 00 F9 		pop		ACCAU
 188 000074  00 00 F9 		pop		ACCAH
 189 000076  00 00 F9 		pop		ACCAL
 190              	
 191 000078  00 00 06 		return	
 192              	
 193              	
 194              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 195              	
 196              		.end
MPLAB ASM30 Listing:  ../../libVectorMatrix/mmul.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 ../../libVectorMatrix/dspcommon.inc
                            *ABS*:00000000 ../../libVectorMatrix/mmul.s
                            *ABS*:00000001 PSV_ERRATA
                            *ABS*:00000001 __MPLAB_DEBUGGER_ICD3
                            *ABS*:00000001 __DEBUG
                            *ABS*:00000001 __MPLAB_DEBUG
                            *ABS*:00000001 __ICD2RAM
                            *ABS*:00000001 __MPLAB_BUILD
                            *ABS*:00000001 __33FJ256GP710A
                            *ABS*:00000001 __dsPIC33F
                            *ABS*:00000001 __HAS_DSP
                            *ABS*:00000001 __HAS_DMA
                            *ABS*:00000001 __HAS_CODEGUARD
                            *ABS*:00000001 __C30COFF
../../libVectorMatrix/dspcommon.inc:34     *ABS*:00000002 kSof
../../libVectorMatrix/dspcommon.inc:37     *ABS*:00005a82 kSinPiQ
../../libVectorMatrix/dspcommon.inc:38     *ABS*:00005a82 kInvSqrt2
../../libVectorMatrix/dspcommon.inc:44     *ABS*:00000034 PSVPAG
../../libVectorMatrix/dspcommon.inc:45     *ABS*:00000044 CORCON
../../libVectorMatrix/dspcommon.inc:46     *ABS*:00000046 MODCON
../../libVectorMatrix/dspcommon.inc:47     *ABS*:00000050 XBREV
../../libVectorMatrix/dspcommon.inc:48     *ABS*:00000048 XMODSRT
../../libVectorMatrix/dspcommon.inc:49     *ABS*:0000004a XMODEND
../../libVectorMatrix/dspcommon.inc:50     *ABS*:0000004c YMODSRT
../../libVectorMatrix/dspcommon.inc:51     *ABS*:0000004e YMODEND
../../libVectorMatrix/dspcommon.inc:56     *ABS*:00000080 SATA_ON
../../libVectorMatrix/dspcommon.inc:57     *ABS*:00000040 SATB_ON
../../libVectorMatrix/dspcommon.inc:58     *ABS*:00000020 SATDW_ON
../../libVectorMatrix/dspcommon.inc:59     *ABS*:00000010 ACCSAT_ON
../../libVectorMatrix/dspcommon.inc:60     *ABS*:000000f0 FRACT_SET
../../libVectorMatrix/dspcommon.inc:62     *ABS*:fffffffd RND_OFF
../../libVectorMatrix/dspcommon.inc:63     *ABS*:fffffffe IF_OFF
../../libVectorMatrix/dspcommon.inc:64     *ABS*:fffffffc FRACT_RESET
../../libVectorMatrix/dspcommon.inc:66     *ABS*:000000f0 FRACT_MODE
../../libVectorMatrix/dspcommon.inc:75     *ABS*:00000004 PSV_ON
../../libVectorMatrix/dspcommon.inc:96     *ABS*:0000ff00 COEFFS_IN_DATA
../../libVectorMatrix/dspcommon.inc:99     *ABS*:00000000 oNumCoeffs
../../libVectorMatrix/dspcommon.inc:100    *ABS*:00000002 oCoeffsBase
../../libVectorMatrix/dspcommon.inc:102    *ABS*:00000004 oCoeffsEnd
../../libVectorMatrix/dspcommon.inc:104    *ABS*:00000006 oCoeffsPage
../../libVectorMatrix/dspcommon.inc:106    *ABS*:00000008 oDelayBase
../../libVectorMatrix/dspcommon.inc:108    *ABS*:0000000a oDelayEnd
../../libVectorMatrix/dspcommon.inc:110    *ABS*:0000000c oDelay
../../libVectorMatrix/dspcommon.inc:116    *ABS*:00000000 oOrder
../../libVectorMatrix/dspcommon.inc:117    *ABS*:00000002 oKappaVals
../../libVectorMatrix/dspcommon.inc:118    *ABS*:00000004 oGammaVals
../../libVectorMatrix/dspcommon.inc:119    *ABS*:00000006 oLattCoeffsPage
../../libVectorMatrix/dspcommon.inc:120    *ABS*:00000008 oLattDelay
../../libVectorMatrix/mmul.s:75     .libdsp:00000000 _MatrixMultiply
../../libVectorMatrix/mmul.s:106    .libdsp:0000001c _doRows1
../../libVectorMatrix/mmul.s:166    .libdsp:00000068 _doneRows1
../../libVectorMatrix/mmul.s:151    .libdsp:00000058 _endCols2
../../libVectorMatrix/mmul.s:136    .libdsp:0000004a _endCols1Rows2

UNDEFINED SYMBOLS
ACCAL
MPLAB ASM30 Listing:  ../../libVectorMatrix/mmul.s 			page 6


ACCAH
ACCAU
DCOUNT
DOSTARTL
DOSTARTH
DOENDL
DOENDH

EQUATE SYMBOLS
../../libVectorMatrix/dspcommon.inc = 0x0
    ../../libVectorMatrix/mmul.s = 0x0
                      PSV_ERRATA = 0x1
           __MPLAB_DEBUGGER_ICD3 = 0x1
                         __DEBUG = 0x1
                   __MPLAB_DEBUG = 0x1
                       __ICD2RAM = 0x1
                   __MPLAB_BUILD = 0x1
                 __33FJ256GP710A = 0x1
                      __dsPIC33F = 0x1
                       __HAS_DSP = 0x1
                       __HAS_DMA = 0x1
                 __HAS_CODEGUARD = 0x1
                       __C30COFF = 0x1
                            kSof = 0x2
                         kSinPiQ = 0x5a82
                       kInvSqrt2 = 0x5a82
                          PSVPAG = 0x34
                          CORCON = 0x44
                          MODCON = 0x46
                           XBREV = 0x50
                         XMODSRT = 0x48
                         XMODEND = 0x4a
                         YMODSRT = 0x4c
                         YMODEND = 0x4e
                         SATA_ON = 0x80
                         SATB_ON = 0x40
                        SATDW_ON = 0x20
                       ACCSAT_ON = 0x10
                       FRACT_SET = 0xf0
                         RND_OFF = 0xfffffffd
                          IF_OFF = 0xfffffffe
                     FRACT_RESET = 0xfffffffc
                      FRACT_MODE = 0xf0
                          PSV_ON = 0x4
                  COEFFS_IN_DATA = 0xff00
                      oNumCoeffs = 0x0
                     oCoeffsBase = 0x2
                      oCoeffsEnd = 0x4
                     oCoeffsPage = 0x6
                      oDelayBase = 0x8
                       oDelayEnd = 0xa
                          oDelay = 0xc
                          oOrder = 0x0
                      oKappaVals = 0x2
                      oGammaVals = 0x4
                 oLattCoeffsPage = 0x6
                      oLattDelay = 0x8
