MPLAB ASM30 Listing:  ../../libVectorMatrix/vcor.s 			page 1


   1              	;*********************************************************************
   2              	;                                                                    *
   3              	;                       Software License Agreement                   *
   4              	;                                                                    *
   5              	;   The software supplied herewith by Microchip Technology           *
   6              	;   Incorporated (the "Company") for its dsPIC controller            *
   7              	;   is intended and supplied to you, the Company's customer,         *
   8              	;   for use solely and exclusively on Microchip dsPIC                *
   9              	;   products. The software is owned by the Company and/or its        *
  10              	;   supplier, and is protected under applicable copyright laws. All  *
  11              	;   rights are reserved. Any use in violation of the foregoing       *
  12              	;   restrictions may subject the user to criminal sanctions under    *
  13              	;   applicable laws, as well as to civil liability for the breach of *
  14              	;   the terms and conditions of this license.                        *
  15              	;                                                                    *
  16              	;   THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION.  NO           *
  17              	;   WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING,    *
  18              	;   BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND    *
  19              	;   FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE     *
  20              	;   COMPANY SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL,  *
  21              	;   INCIDENTAL OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.  *
  22              	;                                                                    *
  23              	;   (c) Copyright 2003 Microchip Technology, All rights reserved.    *
  24              	;*********************************************************************
  25              	
  26              		; Local inclusions.
  29              		.list
  30              	
  31              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  32              	
  33              		.section .libdsp, code
  34              	
  35              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  36              	;
  37              	; _VectorCorrelate: Vector correlation (using convolution).
  38              	;
  39              	; Operation:
  40              	;	r[n] = sum_(k=0:N-1){x[k]*y[k+n]},
  41              	; where:
  42              	;	x[n] defined for 0 <= n < N,
  43              	;	y[n] defined for 0 <= n < M, (M <= N),
  44              	;	r[n] defined for 0 <= n < N+M-1,
  45              	;
  46              	; Input:
  47              	;	w0 = N, number elements in vector one
  48              	;	w1 = M, number elements in vector two
  49              	;	w2 = r, ptr to destination vector, with R elements
  50              	;	w3 = x, ptr to source vector one
  51              	;	w4 = y, ptr to source vector two
  52              	; Return:
  53              	;	w0 = r, ptr to destination vector
  54              	;
  55              	; System resources usage:
  56              	;	{w0..w7}	used, not restored
  57              	; plus resuorces from VectorConvolve.
  58              	;
  59              	; DO and REPEAT instruction usage.
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcor.s 			page 2


  60              	;	1 level DO instruction
  61              	;	no REPEAT intructions
  62              	; plus Do/REPEAT instructions from VectorConvolve.
  63              	;
  64              	; Program words (24-bit instructions):
  65              	;	14
  66              	; plus words from VectorConvolve
  67              	;
  68              	; Cycles (including C-function call and return overheads):
  69              	;	19 + floor(M/2)*3,
  70              	; plus cycles from VectorConvolve.
  71              	; NOTE that the VectorConvolve source code reports the number of cycles
  72              	; including 4 cycles of C-function call overhead. Thus, the number of
  73              	; actual cycles from VectorConvolve to add to VectorCorrelate is 4 less
  74              	; than whatever number of cycles it takes a stand alone VectorConvolve.
  75              	;............................................................................
  76              	
  77              		; External symbols.
  78              		.extern	_VectorConvolve
  79              	
  80              		.global	_VectorCorrelate	; export
  81              	_VectorCorrelate:
  82              	
  83              	;............................................................................
  84              	
  85              		; Save working registers.
  86              		; none to save...
  87              	
  88              	;............................................................................
  89              	
  90              		; Compute correlation (using convolution).
  91              	
  92              		; First, revert y (source vector two).
  93 000000  84 03 78 		mov	w4,w7				; w7-> y[0]
  94 000002  81 02 E9 		dec	w1,w5				; w5 = M-1
  95 000004  85 02 D0 		sl	w5,w5				; w5 = (M-1)*sizeof(fractional)
  96 000006  05 03 42 		add	w4,w5,w6			; w6-> y[M-1]
  97 000008  81 02 D1 		lsr	w1,w5				; w5 = floor (M/2)
  98 00000a  85 02 E9 		dec	w5,w5				; w5 = M/2-1
  99              	
 100              	;	save the do loop registers
 101 00000c  00 00 F8 		push	DCOUNT
 102 00000e  00 00 F8 		push	DOSTARTL
 103 000010  00 00 F8 		push	DOSTARTH
 104 000012  00 00 F8 		push	DOENDL
 105 000014  00 00 F8 		push	DOENDH
 106              	
 107 000016  05 80 08 		do	w5,_endRevert		; {	; do (M/2-1)+1 times
 107         00 00 00 
 108              							; w5 up for grabs...
 109 00001a  96 02 78 		mov	[w6],w5				; w5 = y[M-1-n]
 110 00001c  17 13 78 		mov	[w7],[w6--]			; y[n] into y[M-1-n]
 111              							; w6-> y[M-1-(n+1)]
 112              	_endRevert:
 113 00001e  85 1B 78 		mov	w5,[w7++]			; y[M-1-n] into y[n]
 114              							; w7-> y[n+1]
 115              	;	restore the do loop registers
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcor.s 			page 3


 116 000020  00 00 F9 		pop		DOENDH
 117 000022  00 00 F9 		pop		DOENDL
 118 000024  00 00 F9 		pop		DOSTARTH
 119 000026  00 00 F9 		pop		DOSTARTL
 120 000028  00 00 F9 		pop		DCOUNT
 121              	
 122              	; }
 123              	
 124              		; Then, invoke convolution...
 125 00002a  00 00 02 		call	_VectorConvolve
 125         00 00 00 
 126              	
 127              	;............................................................................
 128              	
 129              		; Restore working registers.
 130              		; none to restore...
 131              	
 132              	;............................................................................
 133              	
 134 00002e  00 00 06 		return			; NOTE that w0 is set up by _VectorConvolve
 135              	
 136              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 137              	
 138              		.end
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcor.s 			page 4


DEFINED SYMBOLS
                            *ABS*:00000000 ../../libVectorMatrix/dspcommon.inc
                            *ABS*:00000000 ../../libVectorMatrix/vcor.s
                            *ABS*:00000001 PSV_ERRATA
                            *ABS*:00000001 __MPLAB_DEBUGGER_ICD3
                            *ABS*:00000001 __DEBUG
                            *ABS*:00000001 __MPLAB_DEBUG
                            *ABS*:00000001 __ICD2RAM
                            *ABS*:00000001 __MPLAB_BUILD
                            *ABS*:00000001 __33FJ256GP710A
                            *ABS*:00000001 __dsPIC33F
                            *ABS*:00000001 __HAS_DSP
                            *ABS*:00000001 __HAS_DMA
                            *ABS*:00000001 __HAS_CODEGUARD
                            *ABS*:00000001 __C30COFF
../../libVectorMatrix/dspcommon.inc:34     *ABS*:00000002 kSof
../../libVectorMatrix/dspcommon.inc:37     *ABS*:00005a82 kSinPiQ
../../libVectorMatrix/dspcommon.inc:38     *ABS*:00005a82 kInvSqrt2
../../libVectorMatrix/dspcommon.inc:44     *ABS*:00000034 PSVPAG
../../libVectorMatrix/dspcommon.inc:45     *ABS*:00000044 CORCON
../../libVectorMatrix/dspcommon.inc:46     *ABS*:00000046 MODCON
../../libVectorMatrix/dspcommon.inc:47     *ABS*:00000050 XBREV
../../libVectorMatrix/dspcommon.inc:48     *ABS*:00000048 XMODSRT
../../libVectorMatrix/dspcommon.inc:49     *ABS*:0000004a XMODEND
../../libVectorMatrix/dspcommon.inc:50     *ABS*:0000004c YMODSRT
../../libVectorMatrix/dspcommon.inc:51     *ABS*:0000004e YMODEND
../../libVectorMatrix/dspcommon.inc:56     *ABS*:00000080 SATA_ON
../../libVectorMatrix/dspcommon.inc:57     *ABS*:00000040 SATB_ON
../../libVectorMatrix/dspcommon.inc:58     *ABS*:00000020 SATDW_ON
../../libVectorMatrix/dspcommon.inc:59     *ABS*:00000010 ACCSAT_ON
../../libVectorMatrix/dspcommon.inc:60     *ABS*:000000f0 FRACT_SET
../../libVectorMatrix/dspcommon.inc:62     *ABS*:fffffffd RND_OFF
../../libVectorMatrix/dspcommon.inc:63     *ABS*:fffffffe IF_OFF
../../libVectorMatrix/dspcommon.inc:64     *ABS*:fffffffc FRACT_RESET
../../libVectorMatrix/dspcommon.inc:66     *ABS*:000000f0 FRACT_MODE
../../libVectorMatrix/dspcommon.inc:75     *ABS*:00000004 PSV_ON
../../libVectorMatrix/dspcommon.inc:96     *ABS*:0000ff00 COEFFS_IN_DATA
../../libVectorMatrix/dspcommon.inc:99     *ABS*:00000000 oNumCoeffs
../../libVectorMatrix/dspcommon.inc:100    *ABS*:00000002 oCoeffsBase
../../libVectorMatrix/dspcommon.inc:102    *ABS*:00000004 oCoeffsEnd
../../libVectorMatrix/dspcommon.inc:104    *ABS*:00000006 oCoeffsPage
../../libVectorMatrix/dspcommon.inc:106    *ABS*:00000008 oDelayBase
../../libVectorMatrix/dspcommon.inc:108    *ABS*:0000000a oDelayEnd
../../libVectorMatrix/dspcommon.inc:110    *ABS*:0000000c oDelay
../../libVectorMatrix/dspcommon.inc:116    *ABS*:00000000 oOrder
../../libVectorMatrix/dspcommon.inc:117    *ABS*:00000002 oKappaVals
../../libVectorMatrix/dspcommon.inc:118    *ABS*:00000004 oGammaVals
../../libVectorMatrix/dspcommon.inc:119    *ABS*:00000006 oLattCoeffsPage
../../libVectorMatrix/dspcommon.inc:120    *ABS*:00000008 oLattDelay
../../libVectorMatrix/vcor.s:81     .libdsp:00000000 _VectorCorrelate
../../libVectorMatrix/vcor.s:112    .libdsp:0000001e _endRevert

UNDEFINED SYMBOLS
_VectorConvolve
DCOUNT
DOSTARTL
DOSTARTH
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcor.s 			page 5


DOENDL
DOENDH

EQUATE SYMBOLS
../../libVectorMatrix/dspcommon.inc = 0x0
    ../../libVectorMatrix/vcor.s = 0x0
                      PSV_ERRATA = 0x1
           __MPLAB_DEBUGGER_ICD3 = 0x1
                         __DEBUG = 0x1
                   __MPLAB_DEBUG = 0x1
                       __ICD2RAM = 0x1
                   __MPLAB_BUILD = 0x1
                 __33FJ256GP710A = 0x1
                      __dsPIC33F = 0x1
                       __HAS_DSP = 0x1
                       __HAS_DMA = 0x1
                 __HAS_CODEGUARD = 0x1
                       __C30COFF = 0x1
                            kSof = 0x2
                         kSinPiQ = 0x5a82
                       kInvSqrt2 = 0x5a82
                          PSVPAG = 0x34
                          CORCON = 0x44
                          MODCON = 0x46
                           XBREV = 0x50
                         XMODSRT = 0x48
                         XMODEND = 0x4a
                         YMODSRT = 0x4c
                         YMODEND = 0x4e
                         SATA_ON = 0x80
                         SATB_ON = 0x40
                        SATDW_ON = 0x20
                       ACCSAT_ON = 0x10
                       FRACT_SET = 0xf0
                         RND_OFF = 0xfffffffd
                          IF_OFF = 0xfffffffe
                     FRACT_RESET = 0xfffffffc
                      FRACT_MODE = 0xf0
                          PSV_ON = 0x4
                  COEFFS_IN_DATA = 0xff00
                      oNumCoeffs = 0x0
                     oCoeffsBase = 0x2
                      oCoeffsEnd = 0x4
                     oCoeffsPage = 0x6
                      oDelayBase = 0x8
                       oDelayEnd = 0xa
                          oDelay = 0xc
                          oOrder = 0x0
                      oKappaVals = 0x2
                      oGammaVals = 0x4
                 oLattCoeffsPage = 0x6
                      oLattDelay = 0x8
