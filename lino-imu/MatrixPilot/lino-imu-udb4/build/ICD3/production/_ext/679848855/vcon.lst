MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 1


   1              	;*********************************************************************
   2              	;                                                                    *
   3              	;                       Software License Agreement                   *
   4              	;                                                                    *
   5              	;   The software supplied herewith by Microchip Technology           *
   6              	;   Incorporated (the "Company") for its dsPIC controller            *
   7              	;   is intended and supplied to you, the Company's customer,         *
   8              	;   for use solely and exclusively on Microchip dsPIC                *
   9              	;   products. The software is owned by the Company and/or its        *
  10              	;   supplier, and is protected under applicable copyright laws. All  *
  11              	;   rights are reserved. Any use in violation of the foregoing       *
  12              	;   restrictions may subject the user to criminal sanctions under    *
  13              	;   applicable laws, as well as to civil liability for the breach of *
  14              	;   the terms and conditions of this license.                        *
  15              	;                                                                    *
  16              	;   THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION.  NO           *
  17              	;   WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING,    *
  18              	;   BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND    *
  19              	;   FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE     *
  20              	;   COMPANY SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL,  *
  21              	;   INCIDENTAL OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.  *
  22              	;                                                                    *
  23              	;   (c) Copyright 2003 Microchip Technology, All rights reserved.    *
  24              	;*********************************************************************
  25              	
  26              		; Local inclusions.
  29              		.list
  30              	
  31              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  32              	
  33              		.section .libdsp, code
  34              	
  35              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  36              	;
  37              	; _VectorConvolve: Vector convolution.
  38              	;
  39              	; Operation:
  40              	;	y[n] = sum_(k=0:n){x[k]*h[n-k]},	0 <= n < M
  41              	;	y[n] = sum_(k=n-M+1:n){x[k]*h[n-k]},	M <= n < N
  42              	;	y[n] = sum_(k=n-M+1:N-1){x[k]*h[n-k]},	N <= n < N+M-1
  43              	;
  44              	; Input:
  45              	;	w0 = N, number elements in vector one
  46              	;	w1 = M, number elements in vector two, M <= N
  47              	;	w2 = y, ptr to destination vector, with (N + M - 1) elements
  48              	;	w3 = x, ptr to source vector one
  49              	;	w4 = h, ptr to source vector two
  50              	; Return:
  51              	;	w0 = y, ptr to destination vector
  52              	;
  53              	; System resources usage:
  54              	;	{w0..w7}	used, not restored
  55              	;	{w8..w10}	saved, used, restored
  56              	;	 AccuA		saved, used, restored
  57              	;	 CORCON		saved, used, restored
  58              	;
  59              	; DO and REPEAT instruction usage.
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 2


  60              	;	2 level DO instruction
  61              	;	no REPEAT intructions
  62              	;
  63              	; Program words (24-bit instructions):
  64              	;	58
  65              	;
  66              	; Cycles (including C-function call and return overheads):
  67              	;	28 + 13*M + 6*sum_(m=1:M){m} + (N-M)*(7+3*M)	(if M < N)
  68              	;	26 + 13*M + 6*sum_(m=1:M){m}			(if M = N)
  69              	;............................................................................
  70              	
  71              		.global	_VectorConvolve	; export
  72              	_VectorConvolve:
  73              	
  74              	;	save the 40 bit A accumulator
  75 000000  00 00 F8 		push	ACCAL
  76 000002  00 00 F8 		push	ACCAH
  77 000004  00 00 F8 		push	ACCAU
  78              	
  79              	;............................................................................
  80              	
  81              		; Save working registers.
  82 000006  88 9F BE 		push.d	w8				; {w8:w9} to TOS
  83 000008  8A 1F 78 		push	w10				; {w10} to TOS
  84              	
  85              	;............................................................................
  86              	
  87              		; Prepare CORCON for fractional computation.
  88 00000a  44 00 F8 		push	CORCON
  89              		fractsetup	w7
  89 00000c  07 0F 20 	> mov #FRACT_MODE,w7
  89 00000e  27 02 88 	> mov w7,CORCON
  90              	
  91              	;............................................................................
  92              	
  93              		; Set up.
  94 000010  82 1F 78 		push	w2				; save return value (y)
  95              	
  96              	;............................................................................
  97              	
  98              		; First stage: y[n] = sum_(k=0:n){x[k]*h[n-k]}, 0 <= n < M.
  99              	
 100              		; Prepare operation.
 101 000012  81 03 E9 		dec	w1,w7				; w7 = M-1
 102 000014  00 05 EB 		clr	w10				; w10= 0
 103              	
 104              	;	save the do loop registers
 105 000016  00 00 F8 		push	DCOUNT
 106 000018  00 00 F8 		push	DOSTARTL
 107 00001a  00 00 F8 		push	DOSTARTH
 108 00001c  00 00 F8 		push	DOENDL
 109 00001e  00 00 F8 		push	DOENDH
 110              	
 111              		; Perform operation.
 112 000020  07 80 08 		do	w7,_endOutFirst		; {	; do (M-1)+1 times
 112         00 00 00 
 113              	
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 3


 114              		; Prepare operation.
 115 000024  03 04 78 		mov	w3,w8				; w8-> x[0]
 116 000026  84 04 78 		mov	w4,w9				; w9-> h[n]
 117 000028  12 01 C3 		clr	a				; a  = 0
 118              	
 119              	;	save the do loop registers
 120 00002a  00 00 F8 		push	DCOUNT
 121 00002c  00 00 F8 		push	DOSTARTL
 122 00002e  00 00 F8 		push	DOSTARTH
 123 000030  00 00 F8 		push	DOENDL
 124 000032  00 00 F8 		push	DOENDH
 125              	
 126              		; Perform operation.
 127 000034  0A 80 08 		do	w10,_endInFirst		; {	; do n+1 times
 127         00 00 00 
 128 000038  B8 02 78 		mov	[w8++],w5			; w5 = x[k]
 129              							; w8-> x[k+1]
 130 00003a  29 03 78 		mov	[w9--],w6			; w6 = h[n-k]
 131              							; w9-> h[n-k-1]
 132              	_endInFirst:
 133 00003c  12 01 C4 		mac	w5*w6,a				; a  = x[k]*h[n-k]
 134              	
 135              	;	restore the do loop registers
 136 00003e  00 00 F9 		pop		DOENDH
 137 000040  00 00 F9 		pop		DOENDL
 138 000042  00 00 F9 		pop		DOSTARTH
 139 000044  00 00 F9 		pop		DOSTARTL
 140 000046  00 00 F9 		pop		DCOUNT
 141              	
 142              	; }
 143              	
 144 000048  32 00 CD 		sac.r	a,[w2++]			; y[n] store
 145              	
 146              		; Update for next operation.
 147 00004a  04 82 E8 		inc2	w4,w4				; w4-> h[n+1]
 148              	_endOutFirst:
 149 00004c  0A 05 E8 		inc	w10,w10				; w10++
 150              	
 151              	;	restore the do loop registers
 152 00004e  00 00 F9 		pop		DOENDH
 153 000050  00 00 F9 		pop		DOENDL
 154 000052  00 00 F9 		pop		DOSTARTH
 155 000054  00 00 F9 		pop		DOSTARTL
 156 000056  00 00 F9 		pop		DCOUNT
 157              	
 158              	; }
 159              	
 160              		; Update for next stage.
 161 000058  04 82 E9 		dec2	w4,w4				; w4-> h[M-1]
 162 00005a  83 81 E8 		inc2	w3,w3				; w3-> x[1]
 163              	
 164              		; Second stage: y[n] = sum_(k=n-M+1:n){x[k]*h[n-k]}, M <= n < N. 
 165              		; ONLY if M < N!!!
 166              	
 167              		; Prepare operation.
 168 00005c  01 05 50 		sub	w0,w1,w10			; w10= N-M
 169 00005e  00 00 34 		bra	le,_begThird			; M == N (skip second stage)
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 4


 170 000060  0A 05 E9 		dec	w10,w10				; w10= N-M-1
 171              	
 172              	;	save the do loop registers
 173 000062  00 00 F8 		push	DCOUNT
 174 000064  00 00 F8 		push	DOSTARTL
 175 000066  00 00 F8 		push	DOSTARTH
 176 000068  00 00 F8 		push	DOENDL
 177 00006a  00 00 F8 		push	DOENDH
 178              	
 179              		; Perform operation.
 180 00006c  0A 80 08 		do	w10,_endOutSecond	; {	; do (N-M-1)+1 times
 180         00 00 00 
 181              	
 182              		; Prepare operation.
 183 000070  03 04 78 		mov	w3,w8				; w8-> x[k]
 184 000072  84 04 78 		mov	w4,w9				; w9-> h[M-1]
 185 000074  12 01 C3 		clr	a				; a  = 0
 186              	
 187              	;	save the do loop registers
 188 000076  00 00 F8 		push	DCOUNT
 189 000078  00 00 F8 		push	DOSTARTL
 190 00007a  00 00 F8 		push	DOSTARTH
 191 00007c  00 00 F8 		push	DOENDL
 192 00007e  00 00 F8 		push	DOENDH
 193              	
 194              		; Perform operation.
 195 000080  07 80 08 		do	w7,_endInSecond		; {	; do (M-1)+1 times
 195         00 00 00 
 196 000084  B8 02 78 		mov	[w8++],w5			; w5 = x[k]
 197              							; w8-> x[k+1]
 198 000086  29 03 78 		mov	[w9--],w6			; w6 = h[n-k]
 199              							; w9-> h[n-k-1]
 200              	_endInSecond:
 201 000088  12 01 C4 		mac	w5*w6,a				; a  = x[k]*h[n-k]
 202              	
 203              	;	restore the do loop registers
 204 00008a  00 00 F9 		pop		DOENDH
 205 00008c  00 00 F9 		pop		DOENDL
 206 00008e  00 00 F9 		pop		DOSTARTH
 207 000090  00 00 F9 		pop		DOSTARTL
 208 000092  00 00 F9 		pop		DCOUNT
 209              	
 210              	; }
 211              	
 212 000094  32 00 CD 		sac.r	a,[w2++]			; y[n] store
 213              	
 214              		; Update for next operation.
 215              	_endOutSecond:
 216 000096  83 81 E8 		inc2	w3,w3				; w3-> x[k]
 217              	
 218              	;	restore the do loop registers
 219 000098  00 00 F9 		pop		DOENDH
 220 00009a  00 00 F9 		pop		DOENDL
 221 00009c  00 00 F9 		pop		DOSTARTH
 222 00009e  00 00 F9 		pop		DOSTARTL
 223 0000a0  00 00 F9 		pop		DCOUNT
 224              	
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 5


 225              	; }
 226              	
 227              		; Third stage: y[n] = sum_(k=n-M+1:N-1){x[k]*h[n-k]}, N <= n < N+M-1.
 228              		; ONLY if M > 1!!!
 229              	
 230              	_begThird:
 231              		; Prepare operation.
 232 0000a2  87 03 E9 		dec	w7,w7				; w7 = (M-1)-1
 233 0000a4  00 00 35 		bra	lt,_noMore			; M == 1 (skip third stage)
 234              	
 235              	;	save the do loop registers
 236 0000a6  00 00 F8 		push	DCOUNT
 237 0000a8  00 00 F8 		push	DOSTARTL
 238 0000aa  00 00 F8 		push	DOSTARTH
 239 0000ac  00 00 F8 		push	DOENDL
 240 0000ae  00 00 F8 		push	DOENDH
 241              	
 242              		; Perform operation.
 243 0000b0  07 80 08 		do	w7,_endOutThird		; {	; do (M-2)+1 times
 243         00 00 00 
 244              	
 245              		; Prepare operation.
 246 0000b4  03 04 78 		mov	w3,w8				; w8-> x[k]
 247 0000b6  84 04 78 		mov	w4,w9				; w9-> h[M-1]
 248 0000b8  12 01 C3 		clr	a				; a  = 0
 249              	
 250              	;	save the do loop registers
 251 0000ba  00 00 F8 		push	DCOUNT
 252 0000bc  00 00 F8 		push	DOSTARTL
 253 0000be  00 00 F8 		push	DOSTARTH
 254 0000c0  00 00 F8 		push	DOENDL
 255 0000c2  00 00 F8 		push	DOENDH
 256              	
 257              		; Perform operation.
 258 0000c4  07 80 08 		do	w7,_endInThird		; {	; do N+M-1-n times
 258         00 00 00 
 259 0000c8  B8 02 78 		mov	[w8++],w5			; w5 = x[k]
 260              							; w8-> x[k+1]
 261 0000ca  29 03 78 		mov	[w9--],w6			; w6 = h[n-k]
 262              							; w9-> h[n-k-1]
 263              	_endInThird:
 264 0000cc  12 01 C4 		mac	w5*w6,a				; a  = x[k]*h[n-k]
 265              	
 266              	;	restore the do loop registers
 267 0000ce  00 00 F9 		pop		DOENDH
 268 0000d0  00 00 F9 		pop		DOENDL
 269 0000d2  00 00 F9 		pop		DOSTARTH
 270 0000d4  00 00 F9 		pop		DOSTARTL
 271 0000d6  00 00 F9 		pop		DCOUNT
 272              	
 273              	; }
 274              	
 275 0000d8  32 00 CD 		sac.r	a,[w2++]			; y[n] store
 276              	
 277              		; Update for next operation.
 278 0000da  83 81 E8 		inc2	w3,w3				; w3-> x[k]
 279              	_endOutThird:
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 6


 280 0000dc  87 03 E9 		dec	w7,w7				; w7--
 281              	
 282              	;	restore the do loop registers
 283 0000de  00 00 F9 		pop		DOENDH
 284 0000e0  00 00 F9 		pop		DOENDL
 285 0000e2  00 00 F9 		pop		DOSTARTH
 286 0000e4  00 00 F9 		pop		DOSTARTL
 287 0000e6  00 00 F9 		pop		DCOUNT
 288              	
 289              	; }
 290              	
 291              	_noMore:
 292              	;............................................................................
 293              	
 294 0000e8  4F 00 78 		pop	w0				; restore return value
 295              	
 296              	;............................................................................
 297              	
 298              		; Restore CORCON.
 299 0000ea  44 00 F9 		pop	CORCON
 300              	
 301              	;............................................................................
 302              	
 303              		; Restore working registers.
 304 0000ec  4F 05 78 		pop	w10				; {w10} from TOS
 305 0000ee  4F 04 BE 		pop.d	w8				; {w8:w9} from TOS
 306              	
 307              	;............................................................................
 308              	
 309              	;	restore the 40 bit A accumulator
 310 0000f0  00 00 F9 		pop		ACCAU
 311 0000f2  00 00 F9 		pop		ACCAH
 312 0000f4  00 00 F9 		pop		ACCAL
 313              	
 314 0000f6  00 00 06 		return	
 315              	
 316              	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 317              	
 318              		.end
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 ../../libVectorMatrix/dspcommon.inc
                            *ABS*:00000000 ../../libVectorMatrix/vcon.s
                            *ABS*:00000001 PSV_ERRATA
                            *ABS*:00000001 __MPLAB_BUILD
                            *ABS*:00000001 __33FJ256GP710A
                            *ABS*:00000001 __dsPIC33F
                            *ABS*:00000001 __HAS_DSP
                            *ABS*:00000001 __HAS_DMA
                            *ABS*:00000001 __HAS_CODEGUARD
                            *ABS*:00000001 __C30COFF
../../libVectorMatrix/dspcommon.inc:34     *ABS*:00000002 kSof
../../libVectorMatrix/dspcommon.inc:37     *ABS*:00005a82 kSinPiQ
../../libVectorMatrix/dspcommon.inc:38     *ABS*:00005a82 kInvSqrt2
../../libVectorMatrix/dspcommon.inc:44     *ABS*:00000034 PSVPAG
../../libVectorMatrix/dspcommon.inc:45     *ABS*:00000044 CORCON
../../libVectorMatrix/dspcommon.inc:46     *ABS*:00000046 MODCON
../../libVectorMatrix/dspcommon.inc:47     *ABS*:00000050 XBREV
../../libVectorMatrix/dspcommon.inc:48     *ABS*:00000048 XMODSRT
../../libVectorMatrix/dspcommon.inc:49     *ABS*:0000004a XMODEND
../../libVectorMatrix/dspcommon.inc:50     *ABS*:0000004c YMODSRT
../../libVectorMatrix/dspcommon.inc:51     *ABS*:0000004e YMODEND
../../libVectorMatrix/dspcommon.inc:56     *ABS*:00000080 SATA_ON
../../libVectorMatrix/dspcommon.inc:57     *ABS*:00000040 SATB_ON
../../libVectorMatrix/dspcommon.inc:58     *ABS*:00000020 SATDW_ON
../../libVectorMatrix/dspcommon.inc:59     *ABS*:00000010 ACCSAT_ON
../../libVectorMatrix/dspcommon.inc:60     *ABS*:000000f0 FRACT_SET
../../libVectorMatrix/dspcommon.inc:62     *ABS*:fffffffd RND_OFF
../../libVectorMatrix/dspcommon.inc:63     *ABS*:fffffffe IF_OFF
../../libVectorMatrix/dspcommon.inc:64     *ABS*:fffffffc FRACT_RESET
../../libVectorMatrix/dspcommon.inc:66     *ABS*:000000f0 FRACT_MODE
../../libVectorMatrix/dspcommon.inc:75     *ABS*:00000004 PSV_ON
../../libVectorMatrix/dspcommon.inc:96     *ABS*:0000ff00 COEFFS_IN_DATA
../../libVectorMatrix/dspcommon.inc:99     *ABS*:00000000 oNumCoeffs
../../libVectorMatrix/dspcommon.inc:100    *ABS*:00000002 oCoeffsBase
../../libVectorMatrix/dspcommon.inc:102    *ABS*:00000004 oCoeffsEnd
../../libVectorMatrix/dspcommon.inc:104    *ABS*:00000006 oCoeffsPage
../../libVectorMatrix/dspcommon.inc:106    *ABS*:00000008 oDelayBase
../../libVectorMatrix/dspcommon.inc:108    *ABS*:0000000a oDelayEnd
../../libVectorMatrix/dspcommon.inc:110    *ABS*:0000000c oDelay
../../libVectorMatrix/dspcommon.inc:116    *ABS*:00000000 oOrder
../../libVectorMatrix/dspcommon.inc:117    *ABS*:00000002 oKappaVals
../../libVectorMatrix/dspcommon.inc:118    *ABS*:00000004 oGammaVals
../../libVectorMatrix/dspcommon.inc:119    *ABS*:00000006 oLattCoeffsPage
../../libVectorMatrix/dspcommon.inc:120    *ABS*:00000008 oLattDelay
../../libVectorMatrix/vcon.s:72     .libdsp:00000000 _VectorConvolve
../../libVectorMatrix/vcon.s:148    .libdsp:0000004c _endOutFirst
../../libVectorMatrix/vcon.s:132    .libdsp:0000003c _endInFirst
../../libVectorMatrix/vcon.s:230    .libdsp:000000a2 _begThird
../../libVectorMatrix/vcon.s:215    .libdsp:00000096 _endOutSecond
../../libVectorMatrix/vcon.s:200    .libdsp:00000088 _endInSecond
../../libVectorMatrix/vcon.s:291    .libdsp:000000e8 _noMore
../../libVectorMatrix/vcon.s:279    .libdsp:000000dc _endOutThird
../../libVectorMatrix/vcon.s:263    .libdsp:000000cc _endInThird

UNDEFINED SYMBOLS
ACCAL
MPLAB ASM30 Listing:  ../../libVectorMatrix/vcon.s 			page 8


ACCAH
ACCAU
DCOUNT
DOSTARTL
DOSTARTH
DOENDL
DOENDH

EQUATE SYMBOLS
../../libVectorMatrix/dspcommon.inc = 0x0
    ../../libVectorMatrix/vcon.s = 0x0
                      PSV_ERRATA = 0x1
                   __MPLAB_BUILD = 0x1
                 __33FJ256GP710A = 0x1
                      __dsPIC33F = 0x1
                       __HAS_DSP = 0x1
                       __HAS_DMA = 0x1
                 __HAS_CODEGUARD = 0x1
                       __C30COFF = 0x1
                            kSof = 0x2
                         kSinPiQ = 0x5a82
                       kInvSqrt2 = 0x5a82
                          PSVPAG = 0x34
                          CORCON = 0x44
                          MODCON = 0x46
                           XBREV = 0x50
                         XMODSRT = 0x48
                         XMODEND = 0x4a
                         YMODSRT = 0x4c
                         YMODEND = 0x4e
                         SATA_ON = 0x80
                         SATB_ON = 0x40
                        SATDW_ON = 0x20
                       ACCSAT_ON = 0x10
                       FRACT_SET = 0xf0
                         RND_OFF = 0xfffffffd
                          IF_OFF = 0xfffffffe
                     FRACT_RESET = 0xfffffffc
                      FRACT_MODE = 0xf0
                          PSV_ON = 0x4
                  COEFFS_IN_DATA = 0xff00
                      oNumCoeffs = 0x0
                     oCoeffsBase = 0x2
                      oCoeffsEnd = 0x4
                     oCoeffsPage = 0x6
                      oDelayBase = 0x8
                       oDelayEnd = 0xa
                          oDelay = 0xc
                          oOrder = 0x0
                      oKappaVals = 0x2
                      oGammaVals = 0x4
                 oLattCoeffsPage = 0x6
                      oLattDelay = 0x8
